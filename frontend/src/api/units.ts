import { RenterCandidate } from "./renter-candidates";
import { APIResult, deleteRequest, get, handleAPIError, post, put } from "./requests";
import { User } from "./users";

// Represents a Unit object as it will be received from the backend.
export type Unit = {
  _id: string;
  landlordFirstName: string;
  landlordLastName: string;
  landlordEmail: string;
  landlordPhone: string;
  streetAddress: string;
  suiteNumber?: string;
  city: string;
  state: string;
  listingAddress: string;
  areaCode: string;
  sqft: number;
  monthlyRent: number;
  securityDeposit: number;
  acceptThirdParty: boolean;
  housingAuthority: string;
  applicationFeeCost: number;
  dateAvailable: string;
  leasedStatus?: "ushs" | "removed";
  availableNow: boolean;
  numBeds: number;
  numBaths: number;
  appliances: string[];
  communityFeatures: string[];
  parking: string[];
  accessibility: string[];
  pets: string[];
  sharingAcceptable: string;
  landlordComments: string;
  whereFound: string;
  paymentRentingCriteria: string[];
  additionalRules: string[];
  internalComments: string;
  approved: boolean;
  createdAt: string;
  updatedAt: string;
};

export const AVAILABILITY_OPTIONS = ["Available", "Leased"];
export type AvailableOptions = (typeof AVAILABILITY_OPTIONS)[number];

export const HOUSING_AUTHORITY_OPTIONS = ["Any", "LACDA", "HACLA"];
export type HousingAuthorityOptions = (typeof HOUSING_AUTHORITY_OPTIONS)[number];

export const ACCESSIBILITY_OPTIONS = [
  "First Floor",
  "> Second Floor",
  "Stairs Only",
  "Ramps",
  "Elevators",
];
export type AccessibilityOptions = (typeof ACCESSIBILITY_OPTIONS)[number];

export const RENTAL_CRITERIA_OPTIONS = [
  "3rd Party Payment",
  "Credit Check Required",
  "Background Check Required",
  "Program Letter Required",
];
export type RentalCriteriaOptions = (typeof RENTAL_CRITERIA_OPTIONS)[number];

export const ADDITIONAL_RULES_OPTIONS = [
  "Pets Allowed",
  "Manager On Site",
  "Quiet Building",
  "Visitor Policies",
  "Kid Friendly",
  "Min-management Interaction",
  "High-management Interaction",
];
export type AdditionalRulesOptions = (typeof ADDITIONAL_RULES_OPTIONS)[number];

export type FilterParams = {
  search?: string;
  availability?: AvailableOptions;
  housingAuthority?: HousingAuthorityOptions;
  accessibility?: AccessibilityOptions[];
  rentalCriteria?: RentalCriteriaOptions[];
  additionalRules?: AdditionalRulesOptions[];
  minPrice?: number;
  maxPrice?: number;
  minSecurityDeposit?: number;
  maxSecurityDeposit?: number;
  minApplicationFee?: number;
  maxApplicationFee?: number;
  minSize?: number;
  maxSize?: number;
  fromDate?: string;
  toDate?: string;
  beds?: number;
  baths?: number;
  sort?: string;
  approved?: "pending" | "approved";
};

export type GetUnitsParams = {
  search?: string;
  availability?: string;
  housingAuthority?: string;
  accessibility?: string;
  rentalCriteria?: string;
  additionalRules?: string;
  minPrice?: string;
  maxPrice?: string;
  minSecurityDeposit?: string;
  maxSecurityDeposit?: string;
  minApplicationFee?: string;
  maxApplicationFee?: string;
  minSize?: string;
  maxSize?: string;
  fromDate?: string;
  toDate?: string;
  beds?: string;
  baths?: string;
  sort?: string;
  approved?: "pending" | "approved";
};

export async function getUnit(id: string): Promise<APIResult<Unit>> {
  try {
    const response = await get(`/units/${id}`);
    const json = (await response.json()) as Unit;
    return { success: true, data: json };
  } catch (error) {
    return handleAPIError(error);
  }
}

export async function getUnits(params: GetUnitsParams): Promise<APIResult<Unit[]>> {
  try {
    const queryParams = new URLSearchParams(params);
    const url = `/units?${queryParams.toString()}`;
    const response = await get(url);

    const json = (await response.json()) as Unit[];
    return { success: true, data: json };
  } catch (error) {
    return handleAPIError(error);
  }
}

type HousingLocatorFields =
  | "leasedStatus"
  | "whereFound"
  | "paymentRentingCriteria"
  | "additionalRules"
  | "internalComments";

type UnitVirtualFields = "listingAddress" | "availableNow" | "_id"; // _id is generated by mongo

type UneditableFields = UnitVirtualFields | "approved" | "createdAt" | "updatedAt";

export type CreateUnitRequest = Omit<Unit, UneditableFields> &
  Partial<Pick<Unit, HousingLocatorFields>>;

export type UpdateUnitRequest = Partial<Omit<Unit, UneditableFields>>;

export async function createUnit(unit: CreateUnitRequest): Promise<APIResult<Unit>> {
  try {
    const response = await post("/units", unit);
    const json = (await response.json()) as Unit;
    return { success: true, data: json };
  } catch (error) {
    return handleAPIError(error);
  }
}

export async function updateUnit(id: string, unit: UpdateUnitRequest): Promise<APIResult<Unit>> {
  try {
    const response = await put(`/units/${id}`, unit);
    const json = (await response.json()) as Unit;
    return { success: true, data: json };
  } catch (error) {
    return handleAPIError(error);
  }
}

export async function approveUnit(unitId: string): Promise<APIResult<Unit>> {
  try {
    const response = await put(`/units/${unitId}/approve`, {});
    const json = (await response.json()) as Unit;
    return { success: true, data: json };
  } catch (error) {
    return handleAPIError(error);
  }
}

export async function deleteUnit(id: string): Promise<APIResult<Unit>> {
  try {
    const response = await deleteRequest(`/units/${id}`);
    const json = (await response.json()) as Unit;
    return { success: true, data: json };
  } catch (error) {
    return handleAPIError(error);
  }
}

// REFERRALS

export const REFERRAL_STATUSES = [
  "Referred",
  "Viewing",
  "Pending",
  "Approved",
  "Denied",
  "Leased",
  "Canceled",
];

export type ReferralStatus = (typeof REFERRAL_STATUSES)[number];

export type Referral = {
  _id: string;
  status: ReferralStatus;
  renterCandidate: RenterCandidate;
  unit: Unit;
  assignedHousingLocator: User;
  assignedReferringStaff: User;
  updatedAt: string;
  createdAt: string;
};

export async function getUnitReferrals(id: string): Promise<APIResult<Referral[]>> {
  try {
    const response = await get(`/units/${id}/referrals`);
    const json = (await response.json()) as Referral[];
    return { success: true, data: json };
  } catch (error) {
    return handleAPIError(error);
  }
}
